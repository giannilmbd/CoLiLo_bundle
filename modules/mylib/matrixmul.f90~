module matrixmul

 implicit none
save
!  interface
contains
 function mymatmul(A,B,M,K,N)
use mkl95_blas
use mkl95_lapack
integer , intent(in) :: M,K,N
double precision,dimension(M,N):: mymatmul
  double precision, intent(in) :: A(M,K), B(K,N)
double precision :: alpha, beta
integer ::LDA,LDB,LDC


! M=size(A,1);
! N=size(B,2);
! K=size(A,2);
LDA=M;
LDB=K;
LDC=M;
alpha=1.;
beta=0.;


call DGEMM('N','N',M,N,K,ALPHA,A,LDA,B,LDB,BETA,mymatmul,LDC)
end function mymatmul


 function mymatmulcc(A,B,M,K,N)
integer , intent(in) :: M,K,N
complex*16,dimension(M,N) :: mymatmulcc
 complex*16, intent(in) :: A(M,K), B(K,N)
 complex*16 :: alpha, beta
integer ::LDA,LDB,LDC


! M=size(A,1);
! N=size(B,2);
! K=size(A,2);
LDA=M;
LDB=K;
LDC=M;
alpha=1.;
beta=0.;


call zGEMM('N','N',M,N,K,ALPHA,A,LDA,B,LDB,BETA,mymatmulcc,LDC)
end function mymatmulcc



 function mymatmulcd(A,B,M,K,N)
integer , intent(in) :: M,K,N
complex*16,dimension(M,N) :: mymatmulcd
 complex*16, intent(in) :: A(M,K)
complex*16 :: Bc(K,N)
double precision, intent(in) :: B(K,N)
 complex*16 :: alpha, beta
integer ::LDA,LDB,LDC

Bc=cmplx(B);

! M=size(A,1);
! N=size(B,2);
! K=size(A,2);
LDA=M;
LDB=K;
LDC=M;
alpha=1.;
beta=0.;


call zGEMM('N','N',M,N,K,ALPHA,A,LDA,Bc,LDB,BETA,mymatmulcd,LDC)
end function mymatmulcd

 function mymatmuldc(A,B,M,K,N)
integer , intent(in) :: M,K,N
complex*16,dimension(M,N) :: mymatmuldc
 complex*16, intent(in) :: B(K,N)
double precision, intent(in) :: A(M,K)
complex*16 :: Ac(M,K)

 complex*16 :: alpha, beta
integer ::LDA,LDB,LDC

Ac=cmplx(A);
! gg=1
! M=size(A,1);
! N=size(B,2);
! K=size(A,2);
LDA=M;
LDB=K;
LDC=M;
alpha=1.;
beta=0.;

! mymatmuldc=0;
call zGEMM('N','N',M,N,K,ALPHA,Ac,LDA,B,LDB,BETA,mymatmuldc,LDC)
end function mymatmuldc



function outerproduct_f(x,y,nx,ny)
double precision ,dimension(nx,ny):: outerproduct_f
integer, intent(in) :: nx, ny
double precision ,intent(in) :: x(nx),y(ny)


integer :: jj

outerproduct_f=0.
do jj=1,ny
outerproduct_f(:,jj)=x*y(jj);
enddo

return 
end function outerproduct_f


! end interface
end module matrixmul

!*  Purpose
!*  =======
!*
!*  DGEMM  performs one of the matrix-matrix operations
!*
!*     C := alpha!*op( A )!*op( B ) + beta!*C,
!*
!*  where  op( X ) is one of
!*
!*     op( X ) = X   or   op( X ) = X',
!*
!*  alpha and beta are scalars, and A, B and C are matrices, with op( A )
!*  an m by k matrix,  op( B )  a  k by n matrix and  C an m by n matrix.
!*
!*  Arguments
!*  ==========
!*
!*  TRANSA - CHARACTER!*1.
!*           On entry, TRANSA specifies the form of op( A ) to be used in
!*           the matrix multiplication as follows:
!*
!*              TRANSA = 'N' or 'n',  op( A ) = A.
!*
!*              TRANSA = 'T' or 't',  op( A ) = A'.
!*
!*              TRANSA = 'C' or 'c',  op( A ) = A'.
!*
!*           Unchanged on exit.
!*
!*  TRANSB - CHARACTER!*1.
!*           On entry, TRANSB specifies the form of op( B ) to be used in
!*           the matrix multiplication as follows:
!*
!*              TRANSB = 'N' or 'n',  op( B ) = B.
!*
!*              TRANSB = 'T' or 't',  op( B ) = B'.
!*
!*              TRANSB = 'C' or 'c',  op( B ) = B'.
!*
!*           Unchanged on exit.
!*
!*  M      - INTEGER.
!*           On entry,  M  specifies  the number  of rows  of the  matrix
!*           op( A )  and of the  matrix  C.  M  must  be at least  zero.
!*           Unchanged on exit.
!*
!*  N      - INTEGER.
!*           On entry,  N  specifies the number  of columns of the matrix
!*           op( B ) and the number of columns of the matrix C. N must be
!*           at least zero.
!*           Unchanged on exit.
!*
!*  K      - INTEGER.
!*           On entry,  K  specifies  the number of columns of the matrix
!*           op( A ) and the number of rows of the matrix op( B ). K must
!*           be at least  zero.
!*           Unchanged on exit.
!*
!*  ALPHA  - DOUBLE PRECISION.
!*           On entry, ALPHA specifies the scalar alpha.
!*           Unchanged on exit.
!*
!*  A      - DOUBLE PRECISION array of DIMENSION ( LDA, ka ), where ka is
!*           k  when  TRANSA = 'N' or 'n',  and is  m  otherwise.
!*           Before entry with  TRANSA = 'N' or 'n',  the leading  m by k
!*           part of the array  A  must contain the matrix  A,  otherwise
!*           the leading  k by m  part of the array  A  must contain  the
!*           matrix A.
!*           Unchanged on exit.
!*
!*  LDA    - INTEGER.
!*           On entry, LDA specifies the first dimension of A as declared
!*           in the calling (sub) program. When  TRANSA = 'N' or 'n' then
!*           LDA must be at least  max( 1, m ), otherwise  LDA must be at
!*           least  max( 1, k ).
!*           Unchanged on exit.
!*
!*  B      - DOUBLE PRECISION array of DIMENSION ( LDB, kb ), where kb is
!*           n  when  TRANSB = 'N' or 'n',  and is  k  otherwise.
!*           Before entry with  TRANSB = 'N' or 'n',  the leading  k by n
!*           part of the array  B  must contain the matrix  B,  otherwise
!*           the leading  n by k  part of the array  B  must contain  the
!*           matrix B.
!*           Unchanged on exit.
!*
!*  LDB    - INTEGER.
!*           On entry, LDB specifies the first dimension of B as declared
!*           in the calling (sub) program. When  TRANSB = 'N' or 'n' then
!*           LDB must be at least  max( 1, k ), otherwise  LDB must be at
!*           least  max( 1, n ).
!*           Unchanged on exit.
!*
!*  BETA   - DOUBLE PRECISION.
!*           On entry,  BETA  specifies the scalar  beta.  When  BETA  is
!*           supplied as zero then C need not be set on input.
!*           Unchanged on exit.
!*
!*  C      - DOUBLE PRECISION array of DIMENSION ( LDC, n ).
!*           Before entry, the leading  m by n  part of the array  C must
!*           contain the matrix  C,  except when  beta  is zero, in which
!*           case C need not be set on entry.
!*           On exit, the array  C  is overwritten by the  m by n  matrix
!*           ( alpha!*op( A )!*op( B ) + beta!*C ).
!*
!*  LDC    - INTEGER.
!*           On entry, LDC specifies the first dimension of C as declared
!*           in  the  calling  (sub)  program.   LDC  must  be  at  least
!*           max( 1, m ).
!*           Unchanged on exit.
!*
!*
!*  Level 3 Blas routine.