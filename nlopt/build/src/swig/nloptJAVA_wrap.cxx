/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "nlopt.hpp"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(jint count,double const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< double >(static_cast<std::vector< double >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_double_Sg__doCapacity(std::vector< double > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_double_Sg__doReserve(std::vector< double > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_double_Sg__doSize(std::vector< double > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_double_Sg__doAdd__SWIG_0(std::vector< double > *self,std::vector< double >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_double_Sg__doAdd__SWIG_1(std::vector< double > *self,jint index,std::vector< double >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__doRemove(std::vector< double > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          double const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__doGet(std::vector< double > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__doSet(std::vector< double > *self,jint index,std::vector< double >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          double const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_double_Sg__doRemoveRange(std::vector< double > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

struct jfunc {
  JNIEnv *jenv;
  jobject func;
  jmethodID method;
};

static void *free_jfunc(void *p) {
  ((jfunc *) p)->jenv->DeleteGlobalRef(((jfunc *) p)->func);
  delete (jfunc *) p;
  return (void *) 0;
}

static void *dup_jfunc(void *p) {
  jfunc *q = new jfunc;
  q->jenv = ((jfunc *) p)->jenv;
  q->func = q->jenv->NewGlobalRef(((jfunc *) p)->func);
  q->method = ((jfunc *) p)->method;
  return (void *) q;
}

static double func_java(unsigned n, const double *x, double *grad, void *f)
{
  JNIEnv *jenv = ((jfunc *) f)->jenv;
  jobject func = ((jfunc *) f)->func;
  jmethodID method = ((jfunc *) f)->method;

  jdoubleArray jx = jenv->NewDoubleArray(n);
  if (!jx || jenv->ExceptionCheck()) {
    throw nlopt::forced_stop();
  }
  jenv->SetDoubleArrayRegion(jx, 0, n, x);
  jdoubleArray jgrad = (jdoubleArray) 0;
  if (grad) {
    jgrad = jenv->NewDoubleArray(n);
    if (!jgrad || jenv->ExceptionCheck()) {
      jenv->DeleteLocalRef(jx);
      throw nlopt::forced_stop();
    }
    jenv->SetDoubleArrayRegion(jgrad, 0, n, grad);
  }

  jdouble res = jenv->CallDoubleMethod(func, method, jx, jgrad);
  jenv->DeleteLocalRef(jx);

  if (jenv->ExceptionCheck()) {
    if (jgrad) {
      jenv->DeleteLocalRef(jgrad);
    }
    throw nlopt::forced_stop();
  }

  if (grad) {
    jenv->GetDoubleArrayRegion(jgrad, 0, n, grad);
    jenv->DeleteLocalRef(jgrad);
  }

  return res;
}

static void mfunc_java(unsigned m, double *result,
			 unsigned n, const double *x, double *grad, void *f)
{
  JNIEnv *jenv = ((jfunc *) f)->jenv;
  jobject func = ((jfunc *) f)->func;
  jmethodID method = ((jfunc *) f)->method;

  jdoubleArray jx = jenv->NewDoubleArray(n);
  if (!jx || jenv->ExceptionCheck()) {
    throw nlopt::forced_stop();
  }
  jenv->SetDoubleArrayRegion(jx, 0, n, x);
  jdoubleArray jgrad = (jdoubleArray) 0;
  if (grad) {
    jgrad = jenv->NewDoubleArray(m * n);
    if (!jgrad || jenv->ExceptionCheck()) {
      jenv->DeleteLocalRef(jx);
      throw nlopt::forced_stop();
    }
    jenv->SetDoubleArrayRegion(jgrad, 0, m * n, grad);
  }

  jdoubleArray res = (jdoubleArray) jenv->CallObjectMethod(func, method, jx, jgrad);
  jenv->DeleteLocalRef(jx);

  if (!res || jenv->ExceptionCheck()) {
    if (jgrad) {
      jenv->DeleteLocalRef(jgrad);
    }
    if (res) {
      jenv->DeleteLocalRef(res);
    }
    throw nlopt::forced_stop();
  }

  jenv->GetDoubleArrayRegion(res, 0, m, result);
  jenv->DeleteLocalRef(res);

  if (grad) {
    jenv->GetDoubleArrayRegion(jgrad, 0, m * n, grad);
    jenv->DeleteLocalRef(jgrad);
  }
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nlopt_NLoptJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_new_1DoubleVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(double const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  try {
    result = std_vector_Sl_double_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_double_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  try {
    result = std_vector_Sl_double_Sg__doSize((std::vector< double > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_double_Sg__doAdd__SWIG_0(arg1,(double const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  std::vector< double >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  std::vector< double >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_DoubleVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_double_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_delete_1RoundoffLimitedException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nlopt::roundoff_limited *arg1 = (nlopt::roundoff_limited *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nlopt::roundoff_limited **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_delete_1ForcedStopException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nlopt::forced_stop *arg1 = (nlopt::forced_stop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nlopt::forced_stop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_new_1Opt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nlopt::opt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  try {
    result = (nlopt::opt *)new nlopt::opt();
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return 0;
    
  }
  *(nlopt::opt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_delete_1Opt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nlopt::opt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_new_1Opt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  nlopt::algorithm arg1 ;
  unsigned int arg2 ;
  nlopt::opt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (nlopt::algorithm)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = (nlopt::opt *)new nlopt::opt(arg1,arg2);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return 0;
    
  }
  *(nlopt::opt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_new_1Opt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  nlopt::opt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  try {
    result = (nlopt::opt *)new nlopt::opt((char const *)arg1,arg2);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return 0;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return 0;
  }
  *(nlopt::opt **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_new_1Opt_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = 0 ;
  nlopt::opt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nlopt::opt const & is null");
    return 0;
  } 
  try {
    result = (nlopt::opt *)new nlopt::opt((nlopt::opt const &)*arg1);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return 0;
    
  }
  *(nlopt::opt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return 0;
  } 
  try {
    result = (arg1)->optimize((std::vector< double > const &)*arg2);
  } catch(nlopt::roundoff_limited &_e) {
    if (!jenv->ExceptionCheck()) {
      jclass excep = jenv->FindClass("nlopt/RoundoffLimitedException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
    }
    return 0;
    
  } catch(nlopt::forced_stop &_e) {
    if (!jenv->ExceptionCheck()) {
      jclass excep = jenv->FindClass("nlopt/ForcedStopException");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->what());
    }
    return 0;
    
  } catch(std::runtime_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return 0;
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return 0;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return 0;
  }
  *(std::vector< double > **)&jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_Opt_1lastOptimizeResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::result result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (nlopt::result)((nlopt::opt const *)arg1)->last_optimize_result();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_Opt_1lastOptimumValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (double)((nlopt::opt const *)arg1)->last_optimum_value();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_Opt_1getAlgorithm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::algorithm result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (nlopt::algorithm)((nlopt::opt const *)arg1)->get_algorithm();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nlopt_NLoptJNI_Opt_1getAlgorithmName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (char *)((nlopt::opt const *)arg1)->get_algorithm_name();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (unsigned int)((nlopt::opt const *)arg1)->get_dimension();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setMinObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::func arg2 ;
  void *arg3 = (void *) 0 ;
  nlopt_munge arg4 ;
  nlopt_munge arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  {
    arg2 = func_java;
    jfunc jf = {
      jenv, jarg2, jenv->GetMethodID(jenv->FindClass("nlopt/Opt$Func"), "apply", "([D[D)D")
    };
    arg3 = dup_jfunc((void *) &jf);
    arg4 = free_jfunc;
    arg5 = dup_jfunc;
  }
  try {
    (arg1)->set_min_objective(arg2,arg3,arg4,arg5);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setMaxObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::func arg2 ;
  void *arg3 = (void *) 0 ;
  nlopt_munge arg4 ;
  nlopt_munge arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  {
    arg2 = func_java;
    jfunc jf = {
      jenv, jarg2, jenv->GetMethodID(jenv->FindClass("nlopt/Opt$Func"), "apply", "([D[D)D")
    };
    arg3 = dup_jfunc((void *) &jf);
    arg4 = free_jfunc;
    arg5 = dup_jfunc;
  }
  try {
    (arg1)->set_max_objective(arg2,arg3,arg4,arg5);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1removeInequalityConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  try {
    (arg1)->remove_inequality_constraints();
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1removeEqualityConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  try {
    (arg1)->remove_equality_constraints();
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1addInequalityConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jdouble jarg6) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::func arg2 ;
  void *arg3 = (void *) 0 ;
  nlopt_munge arg4 ;
  nlopt_munge arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  {
    arg2 = func_java;
    jfunc jf = {
      jenv, jarg2, jenv->GetMethodID(jenv->FindClass("nlopt/Opt$Func"), "apply", "([D[D)D")
    };
    arg3 = dup_jfunc((void *) &jf);
    arg4 = free_jfunc;
    arg5 = dup_jfunc;
  }
  arg6 = (double)jarg6; 
  try {
    (arg1)->add_inequality_constraint(arg2,arg3,arg4,arg5,arg6);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1addInequalityConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::func arg2 ;
  void *arg3 = (void *) 0 ;
  nlopt_munge arg4 ;
  nlopt_munge arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  {
    arg2 = func_java;
    jfunc jf = {
      jenv, jarg2, jenv->GetMethodID(jenv->FindClass("nlopt/Opt$Func"), "apply", "([D[D)D")
    };
    arg3 = dup_jfunc((void *) &jf);
    arg4 = free_jfunc;
    arg5 = dup_jfunc;
  }
  try {
    (arg1)->add_inequality_constraint(arg2,arg3,arg4,arg5);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1addEqualityConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jdouble jarg6) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::func arg2 ;
  void *arg3 = (void *) 0 ;
  nlopt_munge arg4 ;
  nlopt_munge arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  {
    arg2 = func_java;
    jfunc jf = {
      jenv, jarg2, jenv->GetMethodID(jenv->FindClass("nlopt/Opt$Func"), "apply", "([D[D)D")
    };
    arg3 = dup_jfunc((void *) &jf);
    arg4 = free_jfunc;
    arg5 = dup_jfunc;
  }
  arg6 = (double)jarg6; 
  try {
    (arg1)->add_equality_constraint(arg2,arg3,arg4,arg5,arg6);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1addEqualityConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::func arg2 ;
  void *arg3 = (void *) 0 ;
  nlopt_munge arg4 ;
  nlopt_munge arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  {
    arg2 = func_java;
    jfunc jf = {
      jenv, jarg2, jenv->GetMethodID(jenv->FindClass("nlopt/Opt$Func"), "apply", "([D[D)D")
    };
    arg3 = dup_jfunc((void *) &jf);
    arg4 = free_jfunc;
    arg5 = dup_jfunc;
  }
  try {
    (arg1)->add_equality_constraint(arg2,arg3,arg4,arg5);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1addInequalityMconstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg6, jobject jarg6_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::mfunc arg2 ;
  void *arg3 = (void *) 0 ;
  nlopt_munge arg4 ;
  nlopt_munge arg5 ;
  std::vector< double > *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(nlopt::opt **)&jarg1; 
  {
    arg2 = mfunc_java;
    jfunc jf = {
      jenv, jarg2, jenv->GetMethodID(jenv->FindClass("nlopt/Opt$MFunc"), "apply", "([D[D)[D")
    };
    arg3 = dup_jfunc((void *) &jf);
    arg4 = free_jfunc;
    arg5 = dup_jfunc;
  }
  arg6 = *(std::vector< double > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return ;
  } 
  try {
    (arg1)->add_inequality_mconstraint(arg2,arg3,arg4,arg5,(std::vector< double > const &)*arg6);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1addEqualityMconstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg6, jobject jarg6_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::mfunc arg2 ;
  void *arg3 = (void *) 0 ;
  nlopt_munge arg4 ;
  nlopt_munge arg5 ;
  std::vector< double > *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(nlopt::opt **)&jarg1; 
  {
    arg2 = mfunc_java;
    jfunc jf = {
      jenv, jarg2, jenv->GetMethodID(jenv->FindClass("nlopt/Opt$MFunc"), "apply", "([D[D)[D")
    };
    arg3 = dup_jfunc((void *) &jf);
    arg4 = free_jfunc;
    arg5 = dup_jfunc;
  }
  arg6 = *(std::vector< double > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return ;
  } 
  try {
    (arg1)->add_equality_mconstraint(arg2,arg3,arg4,arg5,(std::vector< double > const &)*arg6);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  (arg1)->set_param((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_Opt_1getParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  result = (double)((nlopt::opt const *)arg1)->get_param((char const *)arg2,arg3);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nlopt_NLoptJNI_Opt_1hasParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((nlopt::opt const *)arg1)->has_param((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nlopt_NLoptJNI_Opt_1nthParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)((nlopt::opt const *)arg1)->nth_param(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1numParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (unsigned int)((nlopt::opt const *)arg1)->num_params();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setLowerBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_lower_bounds(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1getLowerBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & is null");
    return ;
  } 
  ((nlopt::opt const *)arg1)->get_lower_bounds(*arg2);
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1getLowerBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = ((nlopt::opt const *)arg1)->get_lower_bounds();
  *(std::vector< double > **)&jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setLowerBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return ;
  } 
  try {
    (arg1)->set_lower_bounds((std::vector< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setUpperBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_upper_bounds(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1getUpperBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & is null");
    return ;
  } 
  ((nlopt::opt const *)arg1)->get_upper_bounds(*arg2);
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1getUpperBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = ((nlopt::opt const *)arg1)->get_upper_bounds();
  *(std::vector< double > **)&jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setUpperBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return ;
  } 
  try {
    (arg1)->set_upper_bounds((std::vector< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_Opt_1getStopval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (double)((nlopt::opt const *)arg1)->get_stopval();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setStopval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_stopval(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_Opt_1getFtolRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (double)((nlopt::opt const *)arg1)->get_ftol_rel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setFtolRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_ftol_rel(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_Opt_1getFtolAbs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (double)((nlopt::opt const *)arg1)->get_ftol_abs();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setFtolAbs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_ftol_abs(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_Opt_1getXtolRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (double)((nlopt::opt const *)arg1)->get_xtol_rel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setXtolRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_xtol_rel(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setXtolAbs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_xtol_abs(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1getXtolAbs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & is null");
    return ;
  } 
  ((nlopt::opt const *)arg1)->get_xtol_abs(*arg2);
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1getXtolAbs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = ((nlopt::opt const *)arg1)->get_xtol_abs();
  *(std::vector< double > **)&jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setXtolAbs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return ;
  } 
  try {
    (arg1)->set_xtol_abs((std::vector< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setXWeights_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_x_weights(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1getXWeights_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & is null");
    return ;
  } 
  ((nlopt::opt const *)arg1)->get_x_weights(*arg2);
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1getXWeights_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = ((nlopt::opt const *)arg1)->get_x_weights();
  *(std::vector< double > **)&jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setXWeights_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return ;
  } 
  try {
    (arg1)->set_x_weights((std::vector< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_Opt_1getMaxeval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (int)((nlopt::opt const *)arg1)->get_maxeval();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setMaxeval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->set_maxeval(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_Opt_1getNumevals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (int)((nlopt::opt const *)arg1)->get_numevals();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nlopt_NLoptJNI_Opt_1getMaxtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (double)((nlopt::opt const *)arg1)->get_maxtime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setMaxtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_maxtime(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_Opt_1getForceStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (int)((nlopt::opt const *)arg1)->get_force_stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setForceStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->set_force_stop(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1forceStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  try {
    (arg1)->force_stop();
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_nlopt_NLoptJNI_Opt_1getErrmsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (char *)((nlopt::opt const *)arg1)->get_errmsg();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setLocalOptimizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  nlopt::opt *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(nlopt::opt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nlopt::opt const & is null");
    return ;
  } 
  try {
    (arg1)->set_local_optimizer((nlopt::opt const &)*arg2);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1getPopulation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (unsigned int)((nlopt::opt const *)arg1)->get_population();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setPopulation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->set_population(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1getVectorStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (unsigned int)((nlopt::opt const *)arg1)->get_vector_storage();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setVectorStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->set_vector_storage(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setInitialStep_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_initial_step(arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setInitialStep_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return ;
  } 
  try {
    (arg1)->set_initial_step((std::vector< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setDefaultInitialStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return ;
  } 
  try {
    (arg1)->set_default_initial_step((std::vector< double > const &)*arg2);
  } catch(std::bad_alloc &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, (&_e)->what());
    return ;
    
  } catch(std::invalid_argument &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_nlopt_NLoptJNI_Opt_1getInitialStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & is null");
    return 0;
  } 
  result = ((nlopt::opt const *)arg1)->get_initial_step_((std::vector< double > const &)*arg2);
  *(std::vector< double > **)&jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nlopt_NLoptJNI_Opt_1getExceptionsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  result = (bool)((nlopt::opt const *)arg1)->get_exceptions_enabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_Opt_1setExceptionsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  nlopt::opt *arg1 = (nlopt::opt *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nlopt::opt **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_exceptions_enabled(arg2);
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_srand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  nlopt::srand(arg1);
}


SWIGEXPORT void JNICALL Java_nlopt_NLoptJNI_srandTime(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  nlopt::srand_time();
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_versionMajor(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)nlopt::version_major();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_versionMinor(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)nlopt::version_minor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nlopt_NLoptJNI_versionBugfix(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)nlopt::version_bugfix();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nlopt_NLoptJNI_algorithmName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  nlopt::algorithm arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (nlopt::algorithm)jarg1; 
  result = (char *)nlopt::algorithm_name(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


#ifdef __cplusplus
}
#endif

